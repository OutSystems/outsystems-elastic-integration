input {
    http_poller {
        urls => {
            mp => {
                method => get
                url => "${MP_BASE_URL}/RequestEvents?MinutesBefore=${MP_INTERVAL}"
                user => "${MP_USER}"
                password => "${MP_PASSWORD}"
                headers => { Accept => "application/json" }
            }
        }
        request_timeout => "${MP_REQUEST_TIMEOUT}"
        socket_timeout => "${MP_SOCKET_TIMEOUT}"
        schedule => { every => "${MP_SCHEDULE}" }
        metadata_target => "http_poller_metadata"
    }
}

filter {
    mutate {
        convert => [ "instant", "string" ]
    }

    date {
        match => ["instant", "ISO8601"]
        timezone => "Etc/UTC"
    }

    mutate {
        add_field => {
            "[ecs][version]" => "1.5.0"
            "[outsystems][customer_name]" => "${DATA_CUSTOMER_NAME}"
            "[outsystems][location_name]" => "${DATA_LOCATION_NAME}"
            "[outsystems][environment_name]" => "${DATA_ENVIRONMENT_NAME}"
            "[log][data_source]" => "Request Event"
        }

        remove_field => [ "name", "cycle" ]

        copy => { "eventdetails" => "[log][raw_details]" }

        rename => {
            "instant" => "[log][instant]"
            "request_key" => "[request][key]"
            "module_key" => "[application][module_key]"
            "module_name" => "[application][module_name]"
            "application_key" => "[application][key]"
            "application_name" => "[application][name]"

            "[eventdetails][AK]"  => "[application][action_key]"
            "[eventdetails][AN]"  => "[application][action_name]"
            "[eventdetails][EPK]" => "[application][endpoint_key]"
            "[eventdetails][EPN]" => "[application][endpoint_name]"
            "[eventdetails][TK]"  => "[application][tenant_key]"
            "[eventdetails][TN]"  => "[application][tenant_name]"
            "[eventdetails][EK]"  => "[application][environment][key]"
            "[eventdetails][EN]"  => "[application][environment][name]"
            "[eventdetails][FN]"  => "[application][frontend_name]"
        }
    }

    if [request_eventname] == "WebScreenClientExecuted" {

        mutate {
            add_field => { "[request_event][type]" => "Client" }

            rename => {
                "[eventdetails][VK]"     => "[session][visitor_key]"
                "[eventdetails][ViK]"    => "[session][visit_key]"
                "[eventdetails][SK]"     => "[session][key]"
                "[eventdetails][SR]"     => "[application][screen_resolution]"
                "[eventdetails][D]"      => "[request][total_duration]"
                "[eventdetails][LT]"     => "[request][load_time]"
                "[eventdetails][TTFB]"   => "[request][time_to_first_byte]"
                "[eventdetails][TTLB]"   => "[request][time_to_last_byte]"
                "[eventdetails][UA]"     => "user_agent"
            }

            copy => { "[request][total_duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[request][load_time]" => "integer"
                "[request][total_duration]" => "integer"
                "[request][time_to_first_byte]" => "integer"
                "[request][time_to_last_byte]" => "integer"
            }
        }

        range {
            ranges => [
                "[request][total_duration]",    0,        2000, "field:[request][total_duration_class]:Good",
                "[request][total_duration]", 2001,        8000, "field:[request][total_duration_class]:Fair",
                "[request][total_duration]", 8001,999999999999, "field:[request][total_duration_class]:Bad"
            ]
        }

    } else if [request_eventname] == "WebScreenServerExecuted" {

        mutate {
            add_field => { "[request_event][type]" => "Server" }

            rename => {
                "[eventdetails][D]"    => "[request][server_duration]"
                "[eventdetails][TQT]"  => "[query][total_time]"
                "[eventdetails][TQE]"  => "[query][total_executions]"
                "[eventdetails][TET]"  => "[extension][total_time]"
                "[eventdetails][TEE]"  => "[extension][total_executions]"
                "[eventdetails][TCIT]" => "[integration][total_time]"
                "[eventdetails][TCIE]" => "[integration][total_executions]"
                "[eventdetails][IP]"   => "[application][client_ip]"
                "[eventdetails][SAT]"  => "[session][acquisition_time]"
                "[eventdetails][SS]"   => "[session][size]"
                "[eventdetails][VSS]"  => "[session][viewstate_size]"

                "[eventdetails][EC]"   => "[request][error_count]"
            }

            copy => { "[request][server_duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[request][server_duration]" => "integer"
                "[query][total_time]" => "integer"
                "[query][total_executions]" => "integer"
                "[extension][total_time]" => "integer"
                "[extension][total_executions]" => "integer"
                "[integration][total_time]" => "integer"
                "[integration][total_executions]" => "integer"
                "[session][acquisition_time]" => "integer"
                "[session][size]" => "integer"
                "[session][viewstate_size]" => "integer"

                "[request][error_count]" => "integer"
            }
        }

        range {
            ranges => [
                "[request][server_duration]",    0,        2000, "field:[request][total_duration_class]:Good",
                "[request][server_duration]", 2001,        6000, "field:[request][total_duration_class]:Fair",
                "[request][server_duration]", 6001,999999999999, "field:[request][total_duration_class]:Bad",

                "[session][viewstate_size]",     0,        5000, "field:[session][viewstate_size_class]:Good",
                "[session][viewstate_size]",  5001,       10000, "field:[session][viewstate_size_class]:Fair",
                "[session][viewstate_size]", 10001,999999999999, "field:[session][viewstate_size_class]:Bad",

                "[session][size]",    0,        4000, "field:[session][size_class]:Good",
                "[session][size]", 4001,        5000, "field:[session][size_class]:Fair",
                "[session][size]", 5001,999999999999, "field:[session][size_class]:Bad",

                "[integration][total_time]",   0,         200, "field:[integration][total_time_class]:Good",
                "[integration][total_time]", 201,999999999999, "field:[integration][total_time_class]:Bad",

                "[extension][total_time]",   0,         200, "field:[extension][total_time_class]:Good",
                "[extension][total_time]", 201,999999999999, "field:[extension][total_time_class]:Bad",

                "[query][total_time]",   0,         200, "field:[query][total_time_class]:Good",
                "[query][total_time]", 201,999999999999, "field:[query][total_time_class]:Bad"
            ]
        }

    } else if [request_eventname] == "QueryExecuted" {

        mutate {
            add_field => {
                "[request_event][type]" => "Query"
            }

            rename => {
                "[eventdetails][D]"   => "[query][duration]"
                "[eventdetails][OK]"  => "[request][object_key]"
                "[eventdetails][ON]"  => "[request][object_name]"
                "[eventdetails][OEK]" => "[request][object_espace_key]"
                "[eventdetails][OEN]" => "[request][object_espace_name]"

                "[eventdetails][EC]"  => "[request][error_count]"
                "[eventdetails][NE]"  => "[request][number_of_executions]"
            }

            copy => { "[query][duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[query][duration]" => "integer"

                "[request][error_count]" => "integer"
                "[request][number_of_executions]" => "integer"
            }
        }

    } else if [request_eventname] == "ConsumedIntegrationExecuted" {

        mutate {
            add_field => {
                "[request_event][type]" => "Integration"
            }

            rename => {
                "[eventdetails][D]"   => "[integration][duration]"
                "[eventdetails][OK]"  => "[request][object_key]"
                "[eventdetails][ON]"  => "[request][object_name]"
                "[eventdetails][OEK]" => "[request][object_espace_key]"
                "[eventdetails][OEN]" => "[request][object_espace_name]"
                "[eventdetails][IT]"  => "[integration][type]"
                "[eventdetails][IE]"  => "[integration][endpoint]"

                "[eventdetails][EC]"  => "[request][error_count]"
                "[eventdetails][NE]"  => "[request][number_of_executions]"
            }

            copy => { "[integration][duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[integration][duration]" => "integer"

                "[request][error_count]" => "integer"
                "[request][number_of_executions]" => "integer"
            }
        }

    } else if [request_eventname] == "ExtensionExecuted" {

        mutate {
            add_field => {
                "[request_event][type]" => "Extension"
            }

            rename => {
                "[eventdetails][D]"   => "[extension][duration]"
                "[eventdetails][OK]"  => "[request][object_key]"
                "[eventdetails][ON]"  => "[request][object_name]"
                "[eventdetails][OEK]" => "[request][object_espace_key]"
                "[eventdetails][OEN]" => "[request][object_espace_name]"
                "[eventdetails][NE]"  => "[request][number_of_executions]"

                "[eventdetails][EC]"  => "[request][error_count]"
            }

            copy => { "[extension][duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[extension][duration]" => "integer"
                "[request][number_of_executions]" => "integer"

                "[request][error_count]" => "integer"
            }
        }
    }

    mutate {
        rename => {
            "request_eventname" => "[request_event][name]"
        }
    }

    fingerprint {
        source => [
            "[log][instant]",
            "[application][key]",
            "[request][key]",
            "[application][module_key]",
            "[request_event][name]"
        ]
        target => "[@metadata][fingerprint]"
        method => "MURMUR3"
        concatenate_sources => true
    }
}

output {
#    stdout { codec => rubydebug }

    elasticsearch {
        hosts => "${ES_HOST}"
        user => "${ES_USER}"
        password => "${ES_PASS}"
        document_id => "%{[@metadata][fingerprint]}"
        ilm_enabled => true
        ilm_rollover_alias => "os-mon-log-request-event"
        ilm_pattern => "000001"
        ilm_policy => "os-mon-log-ilm-policy"
    }
}
