input {
    jdbc {
        jdbc_driver_library => "${JDBC_LIBRARY}"
        jdbc_driver_class => "${JDBC_DRIVER_CLASS}"
        jdbc_connection_string => "${JDBC_CONNECTION_STRING}"
        jdbc_user => "${JDBC_USER}"
        jdbc_password => "${JDBC_PASSWORD}"
        last_run_metadata_path => "${LAST_RUN_DIR}/jdbc.request_event.last_run"
        schedule => "${JDBC_SCHEDULE}"

        jdbc_paging_enabled => true
        tracking_column => "instant_unix"
        use_column_value => true
        tracking_column_type => "numeric"

        statement => "
            SELECT
                instant_unix            = DATEDIFF(SECOND,'2021-01-01', instant),
                application_key         = re.[APPLICATIONKEY],
                application_name        = re.[APPLICATIONNAME],
                import_latency          = DATEDIFF(minute, re.[Instant],GETDATE()),
                instant                 = re.[INSTANT],
                application_module_key  = re.[MODULEKEY],
                application_module_name = re.[MODULENAME],
                request_key             = re.[REQUESTKEY],
                request_event_name      = re.[REQUESTEVENTNAME],
                request_event_details   = re.[EVENTDETAILS]
            FROM
                [dbo].[oslog_RequestEvent] (nolock) re
            WHERE DATEDIFF(SECOND,'2021-01-01', instant) > :sql_last_value
        "
    }
}

filter {
    #------------------------------------------------------------------------------#
    # Common part
    #------------------------------------------------------------------------------#
    mutate {
        add_field => {
            "[ecs][version]" => "1.5.0"
            "[outsystems][customer_name]" => "${DATA_CUSTOMER_NAME}"
            "[outsystems][location_name]" => "${DATA_LOCATION_NAME}"
            "[outsystems][environment_name]" => "${DATA_ENVIRONMENT_NAME}"
        }

        convert => [ "instant", "string" ] # we need to convert this to a string to be able to parse it into the @timestamp field

        remove_field => [ "instant_unix" ] # this field was only used for controling the query pagination, so we don't need to keep it
    }

    date {
        match => ["instant", "ISO8601"]
        timezone => "Etc/UTC"
    }

    mutate {
        rename => { "instant" => "[log][instant]" } # the value of this field is now in the @timestamp field, so we just keep it as a control value
    }

    #------------------------------------------------------------------------------#
    # Specific part
    #------------------------------------------------------------------------------#
    json {
        source => "request_event_details"
    }

    fingerprint {
        source => [
                "[instant]",
                "[application_key]",
                "[request_key]",
                "[application_module_key]",
                "[request_event_name]"
        ]
        target => "[@metadata][fingerprint]"
        method => "MURMUR3"
        concatenate_sources => true
    }

    mutate {
        #-----------------------------#
        # Common Request Event fields
        #-----------------------------#
        rename => {
            "[AK]"  => "[application][action_key]"
            "[AN]"  => "[application][action_name]"
            "[EK]"  => "[application][environment][key]"
            "[EN]"  => "[application][environment][name]"
            "[EPK]" => "[application][endpoint_key]"
            "[EPN]" => "[application][endpoint_name]"
            "[TK]"  => "[application][tenant_key]"
            "[TN]"  => "[application][tenant_name]"
            "[FN]"  => "[application][frontend_name]"
        }
    }

    #----------------------------------------------------------------------------#
    # Generate fields according to request type:
    #
    # WebScreenClientExecuted;
    # WebScreenServerExecuted;
    # QueryExecuted;
    # ConsumedIntegrationExecuted;
    # ExtensionExecuted.
    #----------------------------------------------------------------------------#
    if [request_event_name] == "WebScreenClientExecuted" {

        mutate {
            add_field => { "[request_event][type]" => "Client" }

            rename => {
                "[VK]"     => "[session][visitor_key]"
                "[ViK]"    => "[session][visit_key]"
                "[SK]"     => "[session][key]"
                "[SR]"     => "[application][screen_resolution]"
                "[UK]"     => "user_key"
                "[UA]"     => "user_agent"
                "[D]"      => "[request][total_duration]"
                "[LT]"     => "[request][load_time]"
                "[TTFB]"   => "[request][time_to_first_byte]"
                "[TTLB]"   => "[request][time_to_last_byte]"
                "[DMan]"   => "[device][manufacturer]"
                "[DMod]"   => "[device][model]"
                "[DPlat]"  => "[device][platform]"
                "[DPlatV]" => "[device][platform_version]"
                "[NT]"     => "network_type"
                "[CN]"     => "carrier_name"
                "[CCC]"    => "client_country_code"
                "[CNT]"    => "carrier_network_type"
            }

            copy => { "[request][total_duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[request][load_time]" => "integer"
                "[request][total_duration]" => "integer"
                "[request][time_to_first_byte]" => "integer"
                "[request][time_to_last_byte]" => "integer"
            }
        }

        range {
            ranges => [
                    "[request][total_duration]",    0,        2000, "field:[request][total_duration_class]:Good",
                    "[request][total_duration]", 2001,        8000, "field:[request][total_duration_class]:Fair",
                    "[request][total_duration]", 8001,999999999999, "field:[request][total_duration_class]:Bad"
            ]
        }

    } else if [request_event_name] == "WebScreenServerExecuted" {

        mutate {
            add_field => { "[request_event][type]" => "Server" }

            rename => {
                "[EC]"   => "[request][error_count]"
                "[D]"    => "[request][server_duration]"
                "[TQT]"  => "[query][total_time]"
                "[TQE]"  => "[query][total_executions]"
                "[TET]"  => "[extension][total_time]"
                "[TEE]"  => "[extension][total_executions]"
                "[TCIT]" => "[integration][total_time]"
                "[TCIE]" => "[integration][total_executions]"
                "[IP]"   => "[application][client_ip]"
                "[SAT]"  => "[session][acquisition_time]"
                "[SS]"   => "[session][size]"
                "[VSS]"  => "[session][viewstate_size]"
                "[UID]"  => "user_id"
            }

            copy => { "[request][server_duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[request][error_count]" => "integer"
                "[request][server_duration]" => "integer"
                "[query][total_time]" => "integer"
                "[query][total_executions]" => "integer"
                "[extension][total_time]" => "integer"
                "[extension][total_executions]" => "integer"
                "[integration][total_time]" => "integer"
                "[integration][total_executions]" => "integer"
                "[session][acquisition_time]" => "integer"
                "[session][size]" => "integer"
                "[session][viewstate_size]" => "integer"
                "user_id" => "integer"
            }
        }

        range {
            ranges => [
                    "[request][server_duration]",    0,        2000, "field:[request][total_duration_class]:Good",
                    "[request][server_duration]", 2001,        6000, "field:[request][total_duration_class]:Fair",
                    "[request][server_duration]", 6001,999999999999, "field:[request][total_duration_class]:Bad",

                    "[session][viewstate_size]",     0,        5000, "field:[session][viewstate_size_class]:Good",
                    "[session][viewstate_size]",  5001,       10000, "field:[session][viewstate_size_class]:Fair",
                    "[session][viewstate_size]", 10001,999999999999, "field:[session][viewstate_size_class]:Bad",

                    "[session][size]",    0,        4000, "field:[session][size_class]:Good",
                    "[session][size]", 4001,        5000, "field:[session][size_class]:Fair",
                    "[session][size]", 5001,999999999999, "field:[session][size_class]:Bad",

                    "[integration][total_time]",   0,         200, "field:[integration][total_time_class]:Good",
                    "[integration][total_time]", 201,999999999999, "field:[integration][total_time_class]:Bad",

                    "[extension][total_time]",   0,         200, "field:[extension][total_time_class]:Good",
                    "[extension][total_time]", 201,999999999999, "field:[extension][total_time_class]:Bad",

                    "[query][total_time]",   0,         200, "field:[query][total_time_class]:Good",
                    "[query][total_time]", 201,999999999999, "field:[query][total_time_class]:Bad"
            ]
        }

    } else if [request_event_name] == "QueryExecuted" {

        mutate {
            add_field => {
                "[request_event][type]" => "Query"
            }

            rename => {
                "[D]"   => "[query][duration]"
                "[EC]"  => "[request][error_count]"
                "[OK]"  => "[request][object_key]"
                "[ON]"  => "[request][object_name]"
                "[NE]"  => "[request][number_of_executions]"
                "[OEK]" => "[request][object_espace_key]"
                "[OEN]" => "[request][object_espace_name]"
            }

            copy => { "[query][duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[query][duration]" => "integer"
                "[request][error_count]" => "integer"
                "[request][number_of_executions]" => "integer"
            }
        }

    } else if [request_event_name] == "ConsumedIntegrationExecuted" {

        mutate {
            add_field => {
                "[request_event][type]" => "Integration"
            }

            rename => {
                "[D]"   => "[integration][duration]"
                "[EC]"  => "[request][error_count]"
                "[OK]"  => "[request][object_key]"
                "[ON]"  => "[request][object_name]"
                "[OEK]" => "[request][object_espace_key]"
                "[OEN]" => "[request][object_espace_name]"
                "[NE]"  => "[request][number_of_executions]"
                "[IT]"  => "[integration][type]"
                "[IE]"  => "[integration][endpoint]"
            }

            copy => { "[integration][duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[integration][duration]" => "integer"
                "[request][error_count]" => "integer"
                "[request][number_of_executions]" => "integer"
            }
        }

    } else if [request_event_name] == "ExtensionExecuted" {

        mutate {
            add_field => {
                "[request_event][type]" => "Extension"
            }

            rename => {
                "[D]"   => "[extension][duration]"
                "[EC]"  => "[request][error_count]"
                "[OK]"  => "[request][object_key]"
                "[ON]"  => "[request][object_name]"
                "[OEK]" => "[request][object_espace_key]"
                "[OEN]" => "[request][object_espace_name]"
                "[NE]"  => "[request][number_of_executions]"
            }

            copy => { "[extension][duration]" => "[request_event][duration]" }

            convert => {
                "[request_event][duration]" => "integer"
                "[extension][duration]" => "integer"
                "[request][error_count]" => "integer"
                "[request][number_of_executions]" => "integer"
            }
        }
    }

    mutate {
        add_field => { "[log][data_source]" => "Request Event" }

        rename => {
            "application_key" => "[application][key]"
            "application_name" => "[application][name]"
            "application_module_key" => "[application][module_key]"
            "application_module_name" => "[application][module_name]"
            "import_latency" => "[import][latency]"
            "request_key" => "[request][key]"
            "request_event_name" => "[request_event][name]"
            "request_event_details" => "[log][raw_details]"
        }

        remove_field => [ "TSAE", "BGTD", "BGCK", "TSAT", "BGBC", "BGVR", "D", "EC", "NE", "OEK", "OEN", "OK", "ON", "PEK" ]
    }
}

output {
    elasticsearch {
        hosts => "${ES_HOST}"
        user => "${ES_USER}"
        password => "${ES_PASS}"
        document_id => "%{[@metadata][fingerprint]}"
        ilm_enabled => true
        ilm_rollover_alias => "os-mon-log-request-event"
        ilm_pattern => "000001"
        ilm_policy => "os-mon-log-ilm-policy"
    }
}
