input {
    http_poller {
        urls => {
            mp => {
                method => get
                url => "${MP_BASE_URL}/General"
                headers => { 
                  "Accept" => "application/json"
                  "Authorization" => "${ACCESS_TOKEN}"
                  "MinutesBefore" => "${MP_INTERVAL}"
                 }
                ssl_enabled => true
                ssl_certificate_authorities => "/path/to/outsystems-cert.pem"
              }
            }
        request_timeout => "${MP_REQUEST_TIMEOUT}"
        socket_timeout => "${MP_SOCKET_TIMEOUT}"
        schedule => { every => "${MP_SCHEDULE}" }
        metadata_target => "http_poller_metadata"
    }
}

filter {
    mutate {
        rename => { "message" => "message_text" }
        convert => [ "instant", "string" ]
    }

    date {
        match => ["instant", "ISO8601"]
        timezone => "Etc/UTC"
    }

    grok {
        patterns_dir => ["${PATTERNS_DIR}"]
        match => { "message_text" => "%{SPACE}%{MESSAGE_OBJECT:[message_content][object]}%{SPACE}%{WORD}%{SPACE}%{NUMBER:[message_content][duration]}%{GREEDYDATA}" }
    }

    mutate {
        add_field => {
            "[ecs][version]" => "1.5.0"
            "[outsystems][customer_name]" => "${DATA_CUSTOMER_NAME}"
            "[outsystems][location_name]" => "${DATA_LOCATION_NAME}"
            "[outsystems][environment_name]" => "${DATA_ENVIRONMENT_NAME}"
            "[log][data_source]" => "General"
        }

        remove_field => [ "name", "cycle", "http_poller_metadata" ]

        rename => {
            "instant" => "[log][instant]"
            "session_id" => "[session][id]"
            "espace_id" => "[application][espace_id]"
            "espace_name" => "[application][espace_name]"
            "request_key" => "[request][key]"
            "application_name" => "[application][name]"
            "action_name" => "[application][action_name]"
            "module_name" => "[application][module_name]"
            "entrypoint_name" => "[application][entrypoint_name]"
            "message_type" => "[message_content][type]"
            "message_text" => "[message_content][text]"
        }

        convert => {
            "[message_content][duration]" => "integer"
        }
    }

    fingerprint {
        source => ["[request][key]", "[log][instant]", "[message_content][text]"]
        target => "[@metadata][fingerprint]"
        method => "MURMUR3"
        concatenate_sources => true
    }
}

output {
#    stdout { codec => rubydebug }

    elasticsearch {
        hosts => "${ES_HOST}"
        user => "${ES_USER}"
        password => "${ES_PASS}"
        ssl_enabled => true
        ssl_certificate_authorities => "/path/to/elasticsearch-ca.pem"
        document_id => "%{[@metadata][fingerprint]}"
        data_stream => false
        ilm_enabled => true
        ilm_rollover_alias => "os-mon-log-general"
        ilm_pattern => "000001"
        ilm_policy => "os-mon-log-ilm-policy"
    }
}




